/*
 *   Copyright 2024-2025 Franciszek Balcerak
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

#pragma once

#include <DiepDesktop/shared/macro.h>

#include <stdint.h>


typedef enum GameConst
{
	GAME_CONST_DEFAULT_WINDOW_WIDTH = 1280,
	GAME_CONST_DEFAULT_WINDOW_HEIGHT = 720,
	GAME_CONST_MAX_MOVEMENT_SPEED = 16,
	GAME_CONST_MAX_PLAYERS = 256,
	GAME_CONST_MAX_ENTITIES__BITS = MACRO_GET_BITS(GAME_CONST_MAX_PLAYERS * 100),
	GAME_CONST_MAX_ENTITIES = 1 << GAME_CONST_MAX_ENTITIES__BITS,
	GAME_CONST_PORT = 2468,
	GAME_CONST_CLIENT_PACKET_SIZE = 256,
	GAME_CONST_SERVER_PACKET_SIZE = 65536,
	GAME_CONST_CLIENT_RECV_SIZE = GAME_CONST_SERVER_PACKET_SIZE << 3,
	GAME_CONST_SERVER_RECV_SIZE = GAME_CONST_CLIENT_PACKET_SIZE << 3,
	GAME_CONST_SERVER_PACKET_SIZE__BITS = MACRO_GET_BITS(GAME_CONST_SERVER_PACKET_SIZE),
	GAME_CONST_TILE_SIZE = 128,
	GAME_CONST_HALF_ARENA_SIZE = GAME_CONST_TILE_SIZE * 32 + GAME_CONST_TILE_SIZE / 2,
	GAME_CONST_BORDER_PADDING = GAME_CONST_TILE_SIZE * 2,
	GAME_CONST_MIN_QUADTREE_NODE_SIZE = 4,
	GAME_CONST_QUADTREE_QUERY_PADDING = GAME_CONST_TILE_SIZE * 2,
	GAME_CONST_HALF_ARENA_CLEAR_ZONE = GAME_CONST_TILE_SIZE * 50,
	GAME_CONST_POSITION_INTEGER_BITS = MACRO_GET_BITS(GAME_CONST_HALF_ARENA_SIZE + GAME_CONST_HALF_ARENA_CLEAR_ZONE),
	GAME_CONST_BUFFERED_STATES = 3,
	GAME_CONST_TICK_RATE_MS = 30,
	GAME_CONST_MAX_PLAYER_BARRELS = 8,
	GAME_CONST_MAX_PLAYER_BULLETS = 90,
	GAME_CONST_MAX_PLAYER_NAME_LENGTH = 16,
	GAME_CONST_MAX_PLAYER_SCORE_LENGTH = 6,
	GAME_CONST_MAX_SHAPES = GAME_CONST_MAX_PLAYERS << 4,
	GAME_CONST_MAX_UI_ELEMENTS =
		+ 1024 /* buffer for any containers and stuff */
		+ GAME_CONST_MAX_PLAYERS * 128
		+ GAME_CONST_MAX_SHAPES,
	GAME_CONST_MAX_TEXTURES =
		+ GAME_CONST_MAX_PLAYERS * (
			+ GAME_CONST_MAX_PLAYER_BARRELS
			+ GAME_CONST_MAX_PLAYER_BULLETS
			+ GAME_CONST_MAX_PLAYER_NAME_LENGTH * 2
			+ GAME_CONST_MAX_PLAYER_SCORE_LENGTH * 2
			+ 1 /* tank body */
			+ 6 /* hp bar */
			)
		+ GAME_CONST_MAX_SHAPES
		+ 10 /* minimap */
}
GameConst;


typedef enum Keybutton
{
	WINDOW_KEY_BUTTON_W,
	WINDOW_KEY_BUTTON_A,
	WINDOW_KEY_BUTTON_S,
	WINDOW_KEY_BUTTON_D,
	WINDOW_KEY_BUTTON_C,
	WINDOW_KEY_BUTTON_E,
	WINDOW_KEY_BUTTON_LMB,
	WINDOW_KEY_BUTTON_RMB,
	MACRO_ENUM_BITS_EXP(WINDOW_KEY_BUTTON)
}
Keybutton;


typedef enum EntityFlags
{
	ENTITY_FLAG_X,
	ENTITY_FLAG_Y,
	ENTITY_FLAG_W,
	ENTITY_FLAG_R = ENTITY_FLAG_W,
	ENTITY_FLAG_H,
	ENTITY_FLAG_ANGLE,
	MACRO_ENUM_BITS_EXP(ENTITY_FLAG)
}
EntityFlags;


typedef enum ClientOpCode
{
	CLIENT_OPCODE_INPUT,
	MACRO_ENUM_BITS(CLIENT_OPCODE)
}
ClientOpCode;


typedef enum ServerOpCode
{
	SERVER_OPCODE_UPDATE,
	MACRO_ENUM_BITS(SERVER_OPCODE)
}
ServerOpCode;


typedef enum EntityType
{
	ENTITY_TYPE_TANK,
	ENTITY_TYPE_SHAPE,
	MACRO_ENUM_BITS(ENTITY_TYPE)
}
EntityType;


typedef enum Tank
{
	TANK_BASIC,
	MACRO_ENUM_BITS(TANK)
}
Tank;


typedef enum Shape
{
	SHAPE_SQUARE,
	SHAPE_TRIANGLE,
	SHAPE_PENTAGON,
	MACRO_ENUM_BITS(SHAPE)
}
Shape;

extern const float ShapeRadius[];
extern const float ShapeHitbox[];
extern const uint32_t ShapeMaxHP[];
extern const uint32_t ShapeHPBits[];

extern const uint32_t TypeToSubtypeBits[];

typedef enum FieldSize
{
	FIELD_SIZE_TICK_DURATION = 51,
	FIELD_SIZE_MOUSE_X = 11,
	FIELD_SIZE_MOUSE_Y = 11,
	FIELD_SIZE_FOV = 12
}
FieldSize;


#define FIXED_POINT(name) FIXED_POINT_INTEGER_##name, FIXED_POINT_FRACTION_##name
#define DEF_FIXED_POINT(name, Integer, Fraction)	\
FIXED_POINT_INTEGER_##name = Integer,				\
FIXED_POINT_FRACTION_##name = Fraction

typedef enum FixedPoint
{
	DEF_FIXED_POINT(FOV, 0, 10),
	DEF_FIXED_POINT(POS, GAME_CONST_POSITION_INTEGER_BITS, 4),
	DEF_FIXED_POINT(SCREEN_POS, 12, 4),
	DEF_FIXED_POINT(RADIUS, MACRO_GET_BITS(512), 10)
}
FixedPoint;

#undef DEF_FIXED_POINT
